import com.beust.klaxon.Json
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.TypeSpec


class Enum(
        @Json(name = "name")
        var name: String,
        @Json(name = "values")
        var values: Map<String, Int>) {

    val generated by lazy {
        val enumBuilder = TypeSpec.enumBuilder(name.escapeUnderscore())
        enumBuilder.primaryConstructor(
                FunSpec.constructorBuilder()
                        .addParameter("id", Long::class)
                        .addStatement("this.%N = %N", "id", "id")
                        .build()
        )
        enumBuilder.addProperty("id", Long::class)
        for (value in values) enumBuilder.addEnumConstant(
                value.key, TypeSpec.anonymousClassBuilder()
                .addSuperclassConstructorParameter("%L", value.value)
                .build()
        )
        val companion = TypeSpec.companionObjectBuilder()
                .addFunction(FunSpec.builder("fromInt")
                        .addParameter("value", Long::class)
                        .addStatement("return values().single { it.%N == %N }", "id", "value")
                        .build())
                .build()
        enumBuilder.addType(companion)
        enumBuilder.build()
    }

    fun generate(content: StringBuilder) {
        content.appendln("    enum class ${name.escapeUnderscore()}(val id: Long) {")
        for (value in values)
            content.appendln("        ${value.key}(${value.value}),")
        content.appendln("        ;")
        content.appendln()
        content.appendln("        companion object {")
        content.appendln("            fun fromInt(value: Long) = values().single { it.id == value }")
        content.appendln("        }")
        content.appendln("    }")
    }

}